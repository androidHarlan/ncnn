// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#if NCNN_int8_storage
#extension GL_EXT_shader_8bit_storage: require
struct sintvec8 { i8vec4 abcd; i8vec4 efgh; };
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#elif NCNN_int8_packed
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#else
struct sintvec8 { vec4 abcd; vec4 efgh; };
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#endif
#if NCNN_int8_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#endif

layout (constant_id = 0) const int storage_type_from = 0;
layout (constant_id = 1) const int storage_type_to = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob_int32 { aintvec8 bottom_blob_int32_data[]; };
layout (binding = 1) writeonly buffer top_blob { sintvec4 top_blob_data[]; };
#if NCNN_image_shader
layout (binding = 2) uniform highp isampler3D bottom_blob_3d_int32;
layout (binding = 3, iimfmtc4) writeonly uniform iunfp iimage3d top_blob_3d;
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

    aintvec8 v;

    if (psc(dims) == 1)
    {
        if (storage_type_from == 0)
        {
            int gi = gx;

            v = bottom_blob_int32_data[gi];
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = aintvec8(texelFetch(bottom_blob_3d_int32, ivec3(gx * 2, 0, 0), 0), texelFetch(bottom_blob_3d_int32, ivec3(gx * 2 + 1, 0, 0), 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec2 x2 = ivec2(gx * 2) + ivec2(0, 1);

            ivec2 v_offset = x2;

            ibuffer_st4(top_blob_data, v_offset.r, v.abcd);
            ibuffer_st4(top_blob_data, v_offset.g, v.efgh);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int x2 = gx * 2;

            iimage3d_st4(top_blob_3d, ivec3(x2 + 0, 0, 0), v.abcd);
            iimage3d_st4(top_blob_3d, ivec3(x2 + 1, 0, 0), v.efgh);
        }
#endif
    }
    else if (psc(dims) == 2)
    {
        if (storage_type_from == 0)
        {
            int gi = gy * psc(w) + gx;

            v = bottom_blob_int32_data[gi];
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = aintvec8(texelFetch(bottom_blob_3d_int32, ivec3(gx * 2, gy, 0), 0), texelFetch(bottom_blob_3d_int32, ivec3(gx * 2 + 1, gy, 0), 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec2 y2 = ivec2(gy * 2) + ivec2(0, 1);

            ivec2 v_offset = y2 * psc(outw) + gx;

            ibuffer_st4(top_blob_data, v_offset.r, v.abcd);
            ibuffer_st4(top_blob_data, v_offset.g, v.efgh);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int y2 = gy * 2;

            iimage3d_st4(top_blob_3d, ivec3(gx, y2 + 0, 0), v.abcd);
            iimage3d_st4(top_blob_3d, ivec3(gx, y2 + 1, 0), v.efgh);
        }
#endif
    }
    else // if (psc(dims) == 3)
    {
        if (storage_type_from == 0)
        {
            int gi = gz * psc(cstep) + gy * psc(w) + gx;

            v = bottom_blob_int32_data[gi];
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = aintvec8(texelFetch(bottom_blob_3d_int32, ivec3(gx * 2, gy, gz), 0), texelFetch(bottom_blob_3d_int32, ivec3(gx * 2 + 1, gy, gz), 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec2 z2 = ivec2(gz * 2) + ivec2(0, 1);

            ivec2 v_offset = z2 * psc(outcstep) + ivec2(gy * psc(outw) + gx);

            ibuffer_st4(top_blob_data, v_offset.r, v.abcd);
            ibuffer_st4(top_blob_data, v_offset.g, v.efgh);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int z2 = gz * 2;

            iimage3d_st4(top_blob_3d, ivec3(gx, gy, z2 + 0), v.abcd);
            iimage3d_st4(top_blob_3d, ivec3(gx, gy, z2 + 1), v.efgh);
        }
#endif
    }
}
