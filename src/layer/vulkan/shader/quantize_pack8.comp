// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#if NCNN_int8_storage
#extension GL_EXT_shader_8bit_storage: require
struct sintvec8 { i8vec4 abcd; i8vec4 efgh; };
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#elif NCNN_int8_packed
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#else
struct sintvec8 { vec4 abcd; vec4 efgh; };
struct aintvec8 { ivec4 abcd; ivec4 efgh; };
#endif
#if NCNN_int8_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#endif

layout (constant_id = 0) const int scale_data_size = 0;
layout (constant_id = 1) const float scale_value = 1.f;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, iimfmtc4) writeonly uniform iunfp iimage3d top_blob_3d;
layout (binding = 2) uniform unfp sampler3D scale_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sintvec8 top_blob_data[]; };
layout (binding = 2) readonly buffer scale_blob { sfpvec8 scale_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

#if NCNN_image_shader
    afpvec8 v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, gz));
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afpvec8 v = buffer_ld8(bottom_blob_data, gi);
#endif

    afpvec8 scale;

    if (scale_data_size == 1)
    {
        scale = afpvec8(afpvec4(scale_value), afpvec4(scale_value));
    }
    else
    {
        const ivec3 gxyz = ivec3(gx, gy, gz);
        const int abi = gxyz[psc(dims) - 1];

#if NCNN_image_shader
        scale = image3d_ld8(scale_blob, ivec3(abi, 0, 0));
#else
        scale = buffer_ld8(scale_blob_data, abi);
#endif
    }

    aintvec8 v_int;
    v_int.abcd = aintvec4(round(clamp(v[0] * scale[0], afp(-127.f), afp(127.f))));
    v_int.efgh = aintvec4(round(clamp(v[1] * scale[1], afp(-127.f), afp(127.f))));

#if NCNN_image_shader
    iimage3d_st8(top_blob_3d, ivec3(gx, gy, gz), v_int);
#else
    const int outgi = gz * psc(outcstep) + gy * psc(outw) + gx;

    ibuffer_st8(top_blob_data, outgi, v_int);
#endif
}
